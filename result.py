# -*- coding: utf-8 -*-
"""인공지능 기초 마지막

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-aoKDtZ8DbZAAkKH38L8FzTq_k_5E_ZY

#**---------version1---------**
"""

!pip install -U finance-datareader

import math
import matplotlib.pyplot as plt
import keras
import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping
import FinanceDataReader as fdr

df = pd.read_csv('netflix.csv')
df.info()
df.head(10)

df['Open'] = df['Open'].astype('int')
df['High'] = df['High'].astype('int')
df['Low'] = df['Low'].astype('int')
df['Adj Close'] = df['Adj Close'].astype('int')
df['Volume'] = df['Volume'].astype('int')
df['Close'] = df['Close'].astype('int')
df.head()

df2 = pd.DataFrame({
      'x_axis': df['Date'],
      'y_axis': df['Volume']
})
plt.plot('x_axis', 'y_axis', data=df2, linestyle='-', marker='o')
plt.show()
plt.show()

df1 = pd.DataFrame({
      'x_axis': df['Date'],
      'y_axis': df['Close']
})
plt.plot('x_axis', 'y_axis', data=df1, linestyle='-', marker='o')
plt.show()
plt.show()



close_prices = df['Close'].values
print(close_prices)

windown_size = 30

result_list = []
for i in range(len(close_prices) - (windown_size + 1)):
    result_list.append(close_prices[i: i+(windown_size+1)])

normal_data = []
for window in result_list:
    window_list = [((float(p) / float(window[0])) - 1) for p in window]
    normal_data.append(window_list)
    
result_list = np.array(normal_data)
print(result_list.shape[0], result_list.shape[1])

model = Sequential()
model.add(LSTM(windown_size, return_sequences=True, input_shape=(windown_size, 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(1, activation = 'linear'))
model.compile(loss='mse', optimizer='rmsprop')
model.summary()

row = int(round(result_list.shape[0] * 0.9))
train = result_list[:row, :]

x_train = train[:, :-1]
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
y_train = train[:, -1]

x_test = result_list[row:, :-1]
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
y_test = result_list[row:, -1]
print(x_train.shape, x_test.shape)
print(y_train.shape, y_test.shape)

model.fit(x_train, y_train, 
          validation_data=(x_test, y_test),
          batch_size=10,
          epochs=50)

model.save(r'\39_predict\netflix.h5')

pred = model.predict(x_test)

pred_price = []
for i in pred:
    pred_price.append((i+1)*window[0])
    
real_price = []
for i in y_test:
    real_price.append((i+1)*window[0])

fig = plt.figure(facecolor='white', figsize=(40, 15))
ax = fig.add_subplot(234)
ax.plot(real_price, label='real_price')
ax.plot(pred_price, label='pred_price')
ax.legend()
plt.show()

"""# **-----------------다음날 가격 예측-----------------**"""

df['Open'] = df['Open'].astype('int')
df['High'] = df['High'].astype('int')
df['Low'] = df['Low'].astype('int')
df['Adj Close'] = df['Adj Close'].astype('int')
df['Volume'] = df['Volume'].astype('int')
df['Close'] = df['Close'].astype('int')
df.head()

print(df.shape)
print("----")
edf=df.groupby('Date').mean()
print(edf.Close[-1])

def MinMaxScaler(data):
    numerator = data - np.min(data, 0)
    denominator = np.max(data, 0) - np.min(data, 0)
    # 0으로 나누기 에러가 발생하지 않도록 매우 작은 값(1e-7)을 더해서 나눔
    return numerator / (denominator + 1e-7)

dfx = df[['Date','Open','High','Low','Volume', 'Close']]
dfex=dfx.groupby('Date').mean()
dfex = MinMaxScaler(dfex)
print(dfex)
dfy = dfex[['Close']]
dfex = dfex[['Open','High','Low','Volume']]
print(dfy)

x = dfex.values.tolist()
y = dfy.values.tolist()

window_size = 10

data_x = []
data_y = []
for i in range(len(y) - window_size):
    _x = x[i : i + window_size] # 다음 날 종가(i+windows_size)는 포함되지 않음
    _y = y[i + window_size]     # 다음 날 종가
    data_x.append(_x)
    data_y.append(_y)
print(_x, "->", _y)

print('전체 데이터의 크기 :', len(data_x), len(data_y))

train_size = int(len(data_y) * 0.7)
train_x = np.array(data_x[0 : train_size])
train_y = np.array(data_y[0 : train_size])

test_size = len(data_y) - train_size
test_x = np.array(data_x[train_size : len(data_x)])
test_y = np.array(data_y[train_size : len(data_y)])

print(train_x.shape, train_y.shape) #훈련데이터크기
print(test_x.shape, test_y.shape)  #테스트 데이터크기

model = Sequential()
model.add(LSTM(units=20, activation='relu', return_sequences=True, input_shape=(10, 4)))
model.add(Dropout(0.1))
model.add(LSTM(units=20, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(units=1))
model.compile(optimizer='rmsprop', loss='mean_squared_error')
model.summary()

model.fit(train_x, train_y, epochs=50, batch_size=10)
model.save(r'\2_predict\netflix.h5')

pred_y = model.predict(test_x)
pred=print(*pred_y[-1])
e=print(edf.Close[-1])
d=print(dfy.Close[-1])
result= edf.Close[-1] * pred_y[-1] / dfy.Close[-1]

print("내일 netflix 주가 :"+str(result)+'USD')

"""#**-----------------version2(Fail)-----------------**"""

training_set = df.iloc[:900, 1:2].values
test_set = df.iloc[900:, 1:2].values

# Feature Scaling

sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)
# Creating a data structure with 60 time-steps and 1 output
X_train = []
y_train = []
for i in range(60, 900):
   X_train.append(training_set_scaled[i-50:i, 0])
   y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
print(X_train.shape)

model = Sequential()
#Adding the first LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50))
model.add(Dropout(0.2))

# Adding the output layer
model.add(Dense(1, activation = 'linear'))

# Compiling the RNN
model.compile(optimizer = 'rmsprop', loss = 'mse')

# Fitting the RNN to the Training set
model.fit(X_train, y_train, epochs = 10, batch_size = 10)
model.summary()

model.save(r'\39_predict\samsung.h5')

dataset_train = df.iloc[:900, 1:2]
dataset_test = df.iloc[900:, 1:2]
dataset_total = pd.concat((dataset_train, dataset_test), axis = 0)

inputs = dataset_total[len(dataset_total)-len(dataset_test)-60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

X_test = []

for i in range(60, 418):
    X_test.append(training_set_scaled[i-50:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))

print(X_test.shape)

pred = model.predict(X_test)

pred_price = []
for i in pred:
    pred_price.append((i+1)*window[0])
    
real_price = []
for i in y_test:
    real_price.append((i+1)*window[0])

fig = plt.figure(facecolor='white', figsize=(70, 15))
ax = fig.add_subplot(234)
ax.plot(real_price, label='real_price')
ax.plot(pred_price, label='pred_price')
ax.legend()
plt.show()

predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
#predicted_stock_price.shape
print(dataset_test.shape)
print(predicted_stock_price.shape)

dataset_test.values

plt.plot(df.loc[900:, 'Date'],dataset_test.values, color = 'red', label = 'Real netflix elecronics Stock Price')
plt.plot(df.loc[900:, 'Date'],predicted_stock_price, color = 'blue', label = 'Predicted netflix elecronics Stock Price')
plt.xticks(np.arange(0,358,50))

plt.title('nètflix Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('netflix Stock Price')
plt.legend()
plt.show()

